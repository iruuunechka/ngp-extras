package ru.ifmo.ctd.ngp.demo.util.strings;

import java.util.Random;
import org.uncommons.watchmaker.framework.factories.AbstractCandidateFactory;

import ru.ifmo.ctd.ngp.demo.generators.RandomObjGenerator;
import ru.ifmo.ctd.ngp.demo.legacy_ds.string.GStringBuilderX;
import ru.ifmo.ctd.ngp.demo.legacy_ds.string.GStringX;
import ru.ifmo.ctd.ngp.demo.legacy_ds.string.impl.ObjString;

/**
 * Candidate factory of <code>{@link ObjString}s</code>.
 * Generates random strings of a fixed length from a given set of possible elements.
 * 
 * @author Arina Buzdalova
 * @param <T> the type of elements in a string
 * @param <S> type of strings
 * @param <B> type of string builders
 */
public class ObjStringFactory<T, S extends GStringX<T, S, B>, B extends GStringBuilderX<T, B, S>>
        extends AbstractCandidateFactory<S>
{
    private final int stringLength;
    private final RandomObjGenerator<? extends T> generator;
    private final S sampleString;

    /**
     * Constructs {@link ObjStringFactory} with the specified generator of random string elements and
     * the specified length of all strings generated by this factory.
     * @param stringLength the fixed length of all strings generated by this factory
     * @param generator the generator of random string elements
     * @param sampleString a string which is used to produce strings to be generated.
     */
    private ObjStringFactory(int stringLength, RandomObjGenerator<? extends T> generator, S sampleString) {
        this.stringLength = stringLength;
        this.generator = generator;
        this.sampleString = sampleString.emptyString();
    }

    /**
     * Generates a random {@link ObjString} of a pre-configured length.  Each element
     * is randomly selected from the pre-configured set of elements.  The same
     * element may appear multiple times and some elements may not appear at all.
     * @param rng a source of randomness used to select elements to make up the string
     * @return a randomly generated string
     */
    @Override
    public S generateRandomCandidate(Random rng) {
        return generateRandom(stringLength, generator, rng, sampleString);
    }
    
    /**
     * Generates a random {@link ObjString} of a pre-configured length.  Each element
     * is randomly selected from the pre-configured set of elements.  The same
     * element may appear multiple times and some elements may not appear at all.
     * @param stringLength the fixed length of the string being generated
     * @param generator the generator of random string elements
     * @param rng the source of randomness used by <code>generator</code> to select elements to make up the string
     * @param sampleString the string which will be used as a sample to generate new strings.
     * @return a randomly generated string
     */
    private static <
            T,
            S extends GStringX<T, S, B>,
            B extends GStringBuilderX<T, B, S>
    > S generateRandom(int stringLength, RandomObjGenerator<? extends T> generator, Random rng, S sampleString) {
        sampleString = sampleString.emptyString();
    	if (generator.isNull()) {
    		return sampleString;
    	}
    	B builder = sampleString.toGStringBuilder();
    	for (int i = 0; i < stringLength; i++)
        {
             builder.append(generator.generate(rng));
        }
        return builder.toGString();
    }

    /**
     * Creates {@link ObjStringFactory} with the specified parameters
     * @param stringLength the fixed length of all strings generated by the returned factory
     * @param generator the generator of random string elements
     * @param sampleString a string which is used to produce strings to be generated
     * @return the string factory
     */
    public static <
            T,
            S extends GStringX<T, S, B>,
            B extends GStringBuilderX<T, B, S>
    > ObjStringFactory<T, S, B> create(int stringLength, RandomObjGenerator<? extends T> generator, S sampleString) {
        return new ObjStringFactory<>(stringLength, generator, sampleString);
    }
}
