package ru.ifmo.ctd.ngp.demo.ffchooser.switchpoint.gui;

import java.awt.BasicStroke;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import org.jfree.chart.ChartFactory;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.CombinedRangeXYPlot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.renderer.xy.DeviationRenderer;
import org.jfree.data.xy.YIntervalSeriesCollection;

import ru.ifmo.ctd.ngp.demo.ffchooser.config.Configuration;
import ru.ifmo.ctd.ngp.demo.util.ChartUtils;

/**
 * Creator of {@link JFreeChart}, which can include several
 * series for different <code>{@link Configuration}s</code>.
 * 
 * @author Arina Buzdalova
 */
public class DeviationChartCreator {
	private final List<IntervalSeriesContainer> containers;	
	private final DeviationRenderer renderer;
	private static final boolean VISUALIZATION_OPTION = true;
	
	/**
	 * Constructs {@link DeviationChartCreator} with no parameters
	 */
	public DeviationChartCreator() {
		containers = new ArrayList<>(3);
		renderer = new DeviationRenderer(true, false);
	}
	
	/**
	 * Adds the specified {@link IntervalSeriesContainer},
	 * whose series of the specified evaluator 
	 * will be drawn on the chart generated by this {@link DeviationChartCreator}.
	 * @param container the specified container
	 */
	public void addSeriesContainer(IntervalSeriesContainer container) {
		int index = containers.size();
		container.tuneRenderer(renderer, index);	
		renderer.setSeriesStroke(index, new BasicStroke(3F, BasicStroke.CAP_ROUND, BasicStroke.JOIN_ROUND));
		containers.add(container);		
	}
	
	/**
	 * Generates chart with all the series from the previously added <code>{@link IntervalSeriesContainer}s</code>
	 * @param title the title of the created chart
	 * @return chart that shows performance on different configurations
	 * @throws IOException if an I/O exception occurs
	 */
	public JFreeChart generateChart(String title) throws IOException {
		if (VISUALIZATION_OPTION) {
			YIntervalSeriesCollection dataSet = new YIntervalSeriesCollection();

            for (IntervalSeriesContainer container : containers) {
                dataSet.addSeries(container.generateSeries());
            }
			
			JFreeChart chart = ChartFactory.createXYLineChart(
	                title,
	                "Number of generations",
	                "Best fitness",
	                dataSet,
	                PlotOrientation.VERTICAL,
	                true, true, false
	        );		
			
			ChartUtils.setWhiteBackground(chart.getXYPlot());
			chart.getXYPlot().setRenderer(renderer);
			return chart;
		} else {
			renderer.setBaseSeriesVisibleInLegend(false);
			
			List<XYPlot> plots = new ArrayList<>();
            for (IntervalSeriesContainer container : containers) {
                YIntervalSeriesCollection dataSet = new YIntervalSeriesCollection();
                dataSet.addSeries(container.generateSeries());
                JFreeChart chart = ChartFactory.createXYLineChart(
                        title,
                        "Generation number",
                        "",
                        dataSet,
                        PlotOrientation.VERTICAL,
                        true, true, false
                );
                ChartUtils.setWhiteBackground(chart.getXYPlot());
                chart.getXYPlot().setRenderer(renderer);
                plots.add(chart.getXYPlot());
            }
			CombinedRangeXYPlot combined = new CombinedRangeXYPlot();
            plots.forEach(combined::add);
			combined.setOrientation(PlotOrientation.VERTICAL);
			return new JFreeChart(combined);
		}
	}
}
