package ru.ifmo.ctd.ngp.demo.ffchooser.switchpoint.gui;

import org.jfree.chart.ChartFactory;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.CategoryAxis;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.CombinedDomainCategoryPlot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.renderer.category.CategoryItemRenderer;
import ru.ifmo.ctd.ngp.demo.ffchooser.config.Configuration;

import java.awt.*;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * Creator of {@link JFreeChart}, which can include several
 * series of learning choices for different <code>{@link Configuration}s</code>.
 * 
 * @author Arina Buzdalova
 */
public class CategoryChartCreator {
	private static final Color targetColor = new Color(250, 193, 56);
	private final List<CategoryDataSetContainer> containers;
	
	/**
	 * Constructs {@link DeviationChartCreator} with no parameters
	 */
	public CategoryChartCreator() {
		containers = new ArrayList<>(3);
	}
	
	/**
	 * Adds the specified {@link CategoryDataSetContainer},
	 * whose series of the learning choices 
	 * will be drawn on the chart generated by this {@link DeviationChartCreator}.
	 * @param container the specified container
	 */
	public void addCategoryContainer(CategoryDataSetContainer container) {
		containers.add(container);		
	}
	
	/**
	 * Generates chart with all the series from the previously added <code>{@link IntervalSeriesContainer}s</code>
	 * @param title the title of the created chart
	 * @return chart that shows performance on different configurations
	 * @throws IOException if an I/O exception occurs
	 */
	public JFreeChart generateCombinedChart(String title) throws IOException {
		List<CategoryPlot> subplots = new ArrayList<>();
		
		for (CategoryDataSetContainer container : containers) {
			JFreeChart chart = ChartFactory.createStackedAreaChart(
		            title,      
		            "Number of generation",  
		            container.getTitle(),                   
		            container.getDataSet(),    
		            PlotOrientation.VERTICAL,  
		            true,                      
		            true,
		            false
		        );

		    CategoryPlot plot = (CategoryPlot) chart.getPlot();
		    //plot.setForegroundAlpha(0.5f);
		    plot.setBackgroundPaint(Color.white);
		    plot.setDomainGridlinePaint(Color.black);
		    plot.setRangeGridlinePaint(Color.black);
		        
		    CategoryAxis domainAxis = plot.getDomainAxis();
		    domainAxis.setLowerMargin(0.0);
		    domainAxis.setUpperMargin(0.0);

		    // change the auto tick unit selection to integer units only...
		    //NumberAxis rangeAxis = (NumberAxis) plot.getRangeAxis();
		    //rangeAxis.setStandardTickUnits(NumberAxis.createIntegerTickUnits());

		    CategoryItemRenderer renderer = plot.getRenderer();
		    
		    //TODO: read colors from properties?
		    if (container.getDataSet().getRowCount() == 2) {
		    	renderer.setSeriesPaint(0, targetColor);
		    	renderer.setSeriesPaint(1, Color.WHITE);
		    } else {
		    	renderer.setSeriesPaint(0, new Color(89, 224, 177));
			    renderer.setSeriesPaint(1, new Color(252, 25, 139));//130, 130, 136));
			    renderer.setSeriesPaint(2, targetColor);	
			    renderer.setSeriesPaint(3, Color.RED);
			    renderer.setSeriesPaint(4, Color.GREEN);
			    renderer.setSeriesPaint(5, Color.BLUE);
		    }
		    
		    subplots.add(plot);
		}
		
		subplots.get(1).getRenderer().setBaseSeriesVisibleInLegend(false);
		
		CombinedDomainCategoryPlot plot = new CombinedDomainCategoryPlot();
	    plot.setGap(10.0);
	    plot.setBackgroundPaint(Color.WHITE);

		subplots.forEach(plot::add);
	        
	    plot.setOrientation(PlotOrientation.VERTICAL);
	    
	    JFreeChart chart = new JFreeChart(plot);
	    chart.setBackgroundPaint(Color.WHITE);
		
		return chart;
	}

}
