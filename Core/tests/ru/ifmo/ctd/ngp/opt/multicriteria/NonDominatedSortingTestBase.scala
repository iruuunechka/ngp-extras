package ru.ifmo.ctd.ngp.opt.multicriteria

import scala.collection.{IndexedSeq => IS}

import org.junit.{Test, Assert}

import ru.ifmo.ctd.ngp.opt.multicriteria.NonDominatedSorter._

/**
 * Tests the non-dominated sorting algorithms.
 *
 * @author Maxim Buzdalov
 */
abstract class NonDominatedSortingTestBase {
  def getSorter(criteria: Int): NonDominatedSorter

  @Test
  def testOnePoint() {
    val srt = getSorter(1)
    val seq = IS(IS(0))
    Assert.assertEquals(IS(seq), srt.doSorting(seq))
  }

  @Test
  def testOnePointManyCriteria() {
    val srt = getSorter(100)
    val seq = IS(IS.fill(100)(239))
    Assert.assertEquals(IS(seq), srt.doSorting(seq))
  }

  @Test
  def testOneCriterionManyPoints() {
    val srt = getSorter(1)
    val seq = IS.tabulate(100)(v => IS(v))
    Assert.assertEquals(seq.map(e => IS(e)).reverse, srt.doSorting(seq))
  }

  @Test
  def testTwoDominatingPoints1() {
    val srt = getSorter(2)
    val seq = IS(IS(1, 0), IS(2, 0))
    Assert.assertEquals(seq.map(e => IS(e)).reverse, srt.doSorting(seq))
  }

  @Test
  def testTwoDominatingPoints2() {
    val srt = getSorter(2)
    val seq = IS(IS(1, 0), IS(2, 1))
    Assert.assertEquals(seq.map(e => IS(e)).reverse, srt.doSorting(seq))
  }

  @Test
  def testTwoDominatingPoints3() {
    val srt = getSorter(2)
    val seq = IS(IS(2, 0), IS(1, 0))
    Assert.assertEquals(seq.map(e => IS(e)), srt.doSorting(seq))
  }

  @Test
  def testTwoDominatingPoints4() {
    val srt = getSorter(2)
    val seq = IS(IS(2, 1), IS(1, 0))
    Assert.assertEquals(seq.map(e => IS(e)), srt.doSorting(seq))
  }

  @Test
  def testTwoNonDominatingPoints() {
    val srt = getSorter(2)
    val seq = IS(IS(2, 1), IS(1, 2))
    Assert.assertEquals(IS(seq), srt.doSorting(seq))
  }

  @Test
  def testManyEqualPoints() {
    val srt = getSorter(10)
    val seq = IS.fill(10, 10)(11111)
    Assert.assertEquals(IS(seq), srt.doSorting(seq))
  }

  @Test
  def testTwoGroupsOfManyEqualPoints() {
    val srt = getSorter(10)
    val seq1 = IS.fill(10, 10)(11110)
    val seq2 = IS.fill(10, 10)(11111)
    Assert.assertEquals(IS(seq2, seq1), srt.doSorting(seq1 ++ seq2))
  }

  def genSimplex(dim: Int, size: Int): IndexedSeq[IndexedSeq[Int]] = {
    if (dim == 1) {
      IS.tabulate(size)(v => IS(v))
    } else {
      genSimplex(dim - 1, size).flatMap(seq => (0 until size) map (e => seq :+ e))
    }
  }

  @Test
  def testSquare() {
    val srt = getSorter(2)
    val seq = genSimplex(2, 10)
    val expected = seq.groupBy(_.sum).toIndexedSeq.sortBy(-_._1).map(_._2)
    Assert.assertEquals(sortNDSResults(expected), sortNDSResults(srt.doSorting(seq)))
  }

  @Test
  def testSquareDup() {
    val srt = getSorter(2)
    val seq = { val a = genSimplex(2, 10); a ++ a }
    val expected = seq.groupBy(_.sum).toIndexedSeq.sortBy(-_._1).map(_._2)
    Assert.assertEquals(sortNDSResults(expected), sortNDSResults(srt.doSorting(seq)))
  }

  @Test
  def testCube() {
    val srt = getSorter(3)
    val seq = genSimplex(3, 8)
    val expected = seq.groupBy(_.sum).toIndexedSeq.sortBy(-_._1).map(_._2)
    Assert.assertEquals(sortNDSResults(expected), sortNDSResults(srt.doSorting(seq)))
  }

  @Test
  def testCubeDup() {
    val srt = getSorter(3)
    val seq = { val a = genSimplex(3, 8); a ++ a }
    val expected = seq.groupBy(_.sum).toIndexedSeq.sortBy(-_._1).map(_._2)
    Assert.assertEquals(sortNDSResults(expected), sortNDSResults(srt.doSorting(seq)))
  }

  @Test
  def testHypercube() {
    val srt = getSorter(4)
    val seq = genSimplex(4, 5)
    val expected = seq.groupBy(_.sum).toIndexedSeq.sortBy(-_._1).map(_._2)
    Assert.assertEquals(sortNDSResults(expected), sortNDSResults(srt.doSorting(seq)))
  }

  @Test
  def testHypercubeDup() {
    val srt = getSorter(4)
    val seq = { val a = genSimplex(4, 5); a ++ a }
    val expected = seq.groupBy(_.sum).toIndexedSeq.sortBy(-_._1).map(_._2)
    Assert.assertEquals(sortNDSResults(expected), sortNDSResults(srt.doSorting(seq)))
  }

  @Test
  def trickyRandomTest() {
    val input = IS(
      IS(758, 515, 226), IS(786, 98, 268), IS(876, 264, 655), IS(43, 572, 418), IS(158, 517, 647),
      IS(636, 321, 369), IS(19, 547, 935), IS(571, 866, 524), IS(819, 917, 692), IS(555, 487, 980)
    )
    val expected = IS(
      IS(IS(876, 264, 655), IS(19, 547, 935), IS(819, 917, 692), IS(555, 487, 980)),
      IS(IS(758, 515, 226), IS(786, 98, 268), IS(158, 517, 647), IS(636, 321, 369), IS(571, 866, 524)),
      IS(IS(43, 572, 418))
    )
    val srt = getSorter(3)
    Assert.assertEquals(sortNDSResults(expected), sortNDSResults(srt.doSorting(input)))
  }

  @Test
  def somePossiblyStrangeTest(): Unit = {
    val input = IS(
      IS(-802722320, -454657628, 225851471), IS(-98542905, -152834951, 84118477), IS(-914454915, 959085012, -60245822),
      IS(-657036692, -349821749, 311923685), IS(-474717265, -445106490, 535962357), IS(-815877872, 512265128, 531492492),
      IS(-832876652, 780965133, -262104115), IS(-589905879, 725260188, 705639821), IS(744492102, 650058155, 902077439),
      IS(916192307, -400878152, -177898421), IS(-711082130, 23981619, 723118547), IS(289717915, -694022593, -15699066),
      IS(-542792952, 235407179, 957383274),  IS(-625141817, -839959208, 994536087), IS(822035885, 564018861, 571738696)
    ).map(_.map(i => -i))
    val output = IS(1, 1, 1, 2, 2, 1, 1, 3, 3, 1, 2, 1, 3, 1, 3)
    val expected = (input zip output).groupBy(_._2).toIndexedSeq.sortBy(_._1).map(_._2.unzip._1)
    Assert.assertEquals(sortNDSResults(expected), sortNDSResults(getSorter(3).doSorting(input)))
  }

  @Test
  def trickyRandomTest2() {
    val input = IS(
      IS(8, 5, 6, 6, 8, 8), IS(6, 4, 5, 3, 2, 8), IS(8, 7, 7, 6, 1, 9), IS(9, 7, 5, 1, 6, 4), IS(9, 7, 2, 5, 7, 0),
      IS(8, 6, 0, 5, 9, 8), IS(2, 3, 2, 8, 2, 5), IS(3, 9, 0, 6, 2, 8), IS(2, 9, 2, 1, 6, 9), IS(5, 2, 3, 5, 9, 6),
      IS(0, 7, 2, 9, 1, 1), IS(4, 4, 6, 6, 3, 8), IS(9, 2, 5, 8, 0, 7), IS(8, 7, 9, 6, 0, 3), IS(7, 1, 7, 3, 0, 6),
      IS(8, 4, 9, 2, 5, 0), IS(5, 1, 5, 1, 7, 0), IS(2, 2, 4, 2, 6, 7), IS(7, 3, 6, 3, 2, 0), IS(1, 6, 6, 2, 9, 5),
      IS(5, 8, 4, 8, 8, 4), IS(0, 2, 5, 9, 0, 5), IS(3, 4, 6, 4, 2, 0), IS(8, 7, 2, 2, 9, 8), IS(5, 0, 1, 5, 6, 1),
      IS(4, 2, 4, 2, 5, 3), IS(8, 7, 8, 9, 3, 1), IS(1, 1, 6, 1, 5, 0), IS(1, 4, 2, 1, 7, 6), IS(7, 8, 8, 9, 3, 9),
      IS(0, 4, 1, 0, 3, 3), IS(8, 4, 4, 7, 6, 5), IS(1, 5, 0, 4, 5, 2), IS(8, 0, 7, 4, 6, 4), IS(9, 4, 0, 5, 6, 7),
      IS(9, 2, 5, 4, 1, 9), IS(9, 6, 3, 7, 6, 2), IS(2, 6, 8, 6, 2, 6), IS(4, 7, 5, 9, 2, 9), IS(5, 3, 7, 7, 1, 5),
      IS(7, 2, 8, 9, 3, 1), IS(9, 4, 1, 9, 2, 3), IS(4, 9, 5, 8, 2, 0), IS(3, 0, 8, 5, 7, 3), IS(4, 5, 6, 6, 5, 4),
      IS(3, 4, 9, 8, 8, 3), IS(0, 4, 8, 9, 9, 4), IS(1, 7, 5, 6, 2, 4), IS(6, 5, 4, 2, 0, 8), IS(0, 8, 5, 0, 9, 4),
      IS(3, 6, 0, 9, 3, 9), IS(2, 7, 5, 6, 3, 8), IS(1, 5, 5, 5, 6, 0), IS(6, 2, 8, 8, 6, 1), IS(0, 5, 3, 6, 5, 9),
      IS(6, 5, 0, 9, 8, 4), IS(5, 2, 0, 4, 0, 1), IS(7, 7, 7, 1, 9, 0), IS(1, 7, 5, 2, 2, 7), IS(3, 5, 5, 9, 9, 5),
      IS(0, 6, 9, 7, 9, 3), IS(8, 3, 7, 3, 8, 4), IS(0, 1, 6, 6, 0, 6), IS(9, 6, 7, 2, 6, 3), IS(1, 6, 0, 4, 9, 0),
      IS(3, 4, 0, 7, 6, 4), IS(4, 3, 1, 7, 9, 4), IS(2, 2, 8, 4, 5, 6), IS(7, 0, 1, 4, 7, 2), IS(5, 6, 1, 2, 8, 9),
      IS(7, 8, 2, 9, 5, 4), IS(5, 6, 4, 7, 4, 5), IS(5, 8, 3, 3, 4, 8), IS(8, 3, 2, 6, 0, 0), IS(1, 5, 3, 3, 1, 3),
      IS(7, 4, 8, 3, 9, 2), IS(3, 4, 0, 2, 3, 7), IS(9, 7, 9, 1, 9, 8), IS(9, 2, 0, 7, 1, 2), IS(7, 4, 5, 8, 7, 7),
      IS(8, 9, 9, 4, 2, 9), IS(5, 1, 3, 7, 2, 8), IS(5, 3, 7, 4, 6, 4), IS(5, 4, 3, 9, 9, 0), IS(7, 2, 8, 3, 4, 2),
      IS(8, 4, 4, 9, 4, 5), IS(9, 5, 1, 2, 9, 9), IS(6, 9, 2, 8, 8, 2), IS(2, 7, 3, 3, 6, 6), IS(2, 2, 5, 7, 9, 1),
      IS(7, 2, 3, 0, 1, 7), IS(2, 4, 4, 2, 2, 9), IS(5, 5, 0, 8, 4, 9), IS(8, 5, 1, 2, 0, 0), IS(9, 7, 9, 2, 1, 5),
      IS(4, 1, 8, 0, 2, 5), IS(3, 7, 3, 8, 0, 7), IS(7, 4, 2, 1, 7, 8), IS(7, 9, 2, 0, 6, 6), IS(2, 6, 3, 3, 5, 4),
      IS(9, 6, 6, 7, 4, 2), IS(0, 2, 7, 2, 7, 3), IS(9, 6, 1, 0, 5, 0), IS(4, 7, 5, 2, 8, 9), IS(3, 7, 8, 8, 9, 7),
      IS(0, 2, 9, 7, 9, 8), IS(8, 6, 9, 3, 4, 6), IS(9, 0, 3, 6, 3, 1), IS(8, 8, 1, 2, 0, 5), IS(6, 7, 8, 7, 2, 3),
      IS(7, 9, 1, 8, 2, 2), IS(2, 5, 6, 1, 8, 6), IS(8, 7, 4, 4, 7, 0), IS(0, 5, 9, 1, 9, 3), IS(4, 7, 7, 9, 0, 8),
      IS(8, 4, 1, 0, 5, 6), IS(9, 1, 7, 6, 2, 3), IS(8, 5, 1, 9, 0, 6), IS(6, 9, 6, 7, 9, 7), IS(8, 6, 6, 0, 4, 6),
      IS(4, 4, 6, 2, 7, 9), IS(3, 6, 4, 6, 1, 2), IS(3, 0, 2, 6, 8, 1), IS(6, 3, 3, 7, 2, 9), IS(0, 0, 8, 3, 6, 9),
      IS(8, 3, 4, 4, 9, 7), IS(7, 5, 4, 5, 1, 2), IS(4, 8, 8, 7, 8, 0), IS(3, 7, 8, 8, 8, 0), IS(8, 7, 8, 7, 5, 1),
      IS(5, 3, 4, 8, 4, 8), IS(7, 4, 1, 6, 7, 1), IS(7, 5, 4, 7, 7, 4), IS(1, 3, 4, 9, 1, 1), IS(1, 0, 4, 7, 4, 0),
      IS(7, 4, 8, 8, 5, 2), IS(1, 0, 3, 0, 4, 4), IS(3, 0, 6, 1, 5, 6), IS(5, 1, 2, 0, 6, 0), IS(3, 1, 2, 4, 1, 3),
      IS(7, 8, 0, 8, 5, 7), IS(4, 5, 4, 7, 8, 7), IS(4, 9, 2, 1, 0, 7), IS(5, 3, 6, 4, 2, 8), IS(0, 6, 7, 9, 3, 8),
      IS(1, 7, 1, 1, 2, 4), IS(6, 1, 3, 3, 9, 8), IS(6, 6, 8, 4, 5, 7), IS(0, 5, 0, 9, 5, 6), IS(3, 0, 4, 2, 1, 2),
      IS(6, 4, 6, 5, 8, 3), IS(7, 5, 6, 7, 3, 6), IS(2, 7, 2, 4, 5, 9), IS(4, 6, 9, 9, 2, 0), IS(9, 2, 1, 1, 4, 4),
      IS(1, 1, 6, 1, 9, 4), IS(5, 1, 7, 3, 4, 9), IS(8, 9, 2, 1, 7, 0), IS(9, 2, 8, 3, 7, 8), IS(7, 4, 6, 9, 1, 3),
      IS(7, 2, 5, 2, 3, 6), IS(9, 0, 4, 1, 0, 4), IS(4, 3, 3, 2, 5, 9), IS(1, 5, 1, 6, 7, 2), IS(4, 6, 1, 3, 9, 9),
      IS(4, 9, 8, 4, 7, 0), IS(6, 3, 5, 5, 8, 9), IS(6, 2, 1, 7, 8, 1), IS(1, 0, 8, 4, 5, 6), IS(8, 7, 3, 1, 8, 1),
      IS(6, 1, 7, 5, 1, 6), IS(1, 4, 6, 3, 6, 1), IS(7, 3, 3, 8, 4, 0), IS(4, 0, 9, 4, 8, 0), IS(3, 5, 7, 8, 5, 0),
      IS(6, 1, 3, 5, 5, 1), IS(0, 9, 5, 9, 1, 9), IS(1, 6, 1, 2, 7, 7), IS(5, 2, 5, 7, 0, 3), IS(5, 5, 5, 7, 5, 2),
      IS(6, 9, 8, 7, 1, 0), IS(4, 8, 6, 7, 7, 8), IS(9, 0, 9, 9, 7, 4), IS(8, 9, 6, 1, 0, 3), IS(4, 3, 1, 2, 3, 7),
      IS(8, 5, 8, 4, 2, 2), IS(7, 7, 8, 1, 9, 5), IS(5, 0, 9, 7, 4, 8), IS(1, 5, 5, 2, 0, 0), IS(1, 7, 7, 9, 0, 8),
      IS(5, 8, 9, 7, 0, 1), IS(5, 3, 9, 4, 6, 4), IS(1, 3, 9, 1, 2, 6), IS(3, 3, 4, 4, 0, 5), IS(8, 4, 9, 3, 7, 7),
      IS(5, 8, 2, 2, 1, 2), IS(2, 5, 5, 3, 4, 5), IS(3, 2, 3, 7, 7, 2), IS(5, 8, 6, 4, 9, 9), IS(8, 4, 0, 4, 3, 2)
    )
    val expected = IS(
      IS(
        IS(0, 0, 8, 3, 6, 9), IS(0, 2, 9, 7, 9, 8), IS(0, 4, 8, 9, 9, 4), IS(0, 5, 0, 9, 5, 6), IS(0, 5, 3, 6, 5, 9),
        IS(0, 6, 9, 7, 9, 3), IS(0, 9, 5, 9, 1, 9), IS(2, 9, 2, 1, 6, 9), IS(3, 4, 9, 8, 8, 3), IS(3, 5, 5, 9, 9, 5),
        IS(3, 7, 8, 8, 9, 7), IS(3, 9, 0, 6, 2, 8), IS(4, 0, 9, 4, 8, 0), IS(4, 6, 9, 9, 2, 0), IS(4, 8, 6, 7, 7, 8),
        IS(4, 8, 8, 7, 8, 0), IS(4, 9, 5, 8, 2, 0), IS(4, 9, 8, 4, 7, 0), IS(5, 0, 9, 7, 4, 8), IS(5, 1, 7, 3, 4, 9),
        IS(5, 3, 4, 8, 4, 8), IS(5, 3, 9, 4, 6, 4), IS(5, 4, 3, 9, 9, 0), IS(5, 5, 0, 8, 4, 9), IS(5, 8, 4, 8, 8, 4),
        IS(5, 8, 6, 4, 9, 9), IS(5, 8, 9, 7, 0, 1), IS(6, 1, 3, 3, 9, 8), IS(6, 2, 8, 8, 6, 1), IS(6, 3, 5, 5, 8, 9),
        IS(6, 5, 0, 9, 8, 4), IS(6, 6, 8, 4, 5, 7), IS(6, 9, 2, 8, 8, 2), IS(6, 9, 6, 7, 9, 7), IS(6, 9, 8, 7, 1, 0),
        IS(7, 4, 5, 8, 7, 7), IS(7, 4, 8, 3, 9, 2), IS(7, 4, 8, 8, 5, 2), IS(7, 5, 4, 7, 7, 4), IS(7, 8, 0, 8, 5, 7),
        IS(7, 8, 2, 9, 5, 4), IS(7, 8, 8, 9, 3, 9), IS(7, 9, 1, 8, 2, 2), IS(7, 9, 2, 0, 6, 6), IS(8, 3, 4, 4, 9, 7),
        IS(8, 3, 7, 3, 8, 4), IS(8, 4, 4, 7, 6, 5), IS(8, 4, 4, 9, 4, 5), IS(8, 4, 9, 3, 7, 7), IS(8, 5, 1, 9, 0, 6),
        IS(8, 5, 6, 6, 8, 8), IS(8, 6, 0, 5, 9, 8), IS(8, 6, 9, 3, 4, 6), IS(8, 7, 2, 2, 9, 8), IS(8, 7, 4, 4, 7, 0),
        IS(8, 7, 7, 6, 1, 9), IS(8, 7, 8, 7, 5, 1), IS(8, 7, 8, 9, 3, 1), IS(8, 7, 9, 6, 0, 3), IS(8, 9, 2, 1, 7, 0),
        IS(8, 9, 9, 4, 2, 9), IS(9, 0, 9, 9, 7, 4), IS(9, 1, 7, 6, 2, 3), IS(9, 2, 5, 4, 1, 9), IS(9, 2, 5, 8, 0, 7),
        IS(9, 2, 8, 3, 7, 8), IS(9, 4, 0, 5, 6, 7), IS(9, 4, 1, 9, 2, 3), IS(9, 5, 1, 2, 9, 9), IS(9, 6, 3, 7, 6, 2),
        IS(9, 6, 6, 7, 4, 2), IS(9, 6, 7, 2, 6, 3), IS(9, 7, 2, 5, 7, 0), IS(9, 7, 9, 1, 9, 8), IS(9, 7, 9, 2, 1, 5)
      ), IS(
        IS(0, 2, 7, 2, 7, 3), IS(0, 5, 9, 1, 9, 3), IS(0, 6, 7, 9, 3, 8), IS(0, 8, 5, 0, 9, 4), IS(1, 3, 9, 1, 2, 6),
        IS(1, 6, 0, 4, 9, 0), IS(1, 6, 6, 2, 9, 5), IS(2, 2, 5, 7, 9, 1), IS(2, 2, 8, 4, 5, 6), IS(2, 5, 5, 3, 4, 5),
        IS(2, 5, 6, 1, 8, 6), IS(2, 6, 8, 6, 2, 6), IS(2, 7, 2, 4, 5, 9), IS(2, 7, 3, 3, 6, 6), IS(2, 7, 5, 6, 3, 8),
        IS(3, 0, 8, 5, 7, 3), IS(3, 6, 0, 9, 3, 9), IS(3, 7, 8, 8, 8, 0), IS(4, 3, 1, 7, 9, 4), IS(4, 4, 6, 2, 7, 9),
        IS(4, 4, 6, 6, 3, 8), IS(4, 5, 4, 7, 8, 7), IS(4, 5, 6, 6, 5, 4), IS(4, 6, 1, 3, 9, 9), IS(4, 7, 5, 2, 8, 9),
        IS(4, 7, 5, 9, 2, 9), IS(4, 7, 7, 9, 0, 8), IS(4, 9, 2, 1, 0, 7), IS(5, 2, 3, 5, 9, 6), IS(5, 3, 6, 4, 2, 8),
        IS(5, 3, 7, 4, 6, 4), IS(5, 3, 7, 7, 1, 5), IS(5, 5, 5, 7, 5, 2), IS(5, 6, 1, 2, 8, 9), IS(5, 6, 4, 7, 4, 5),
        IS(5, 8, 3, 3, 4, 8), IS(6, 1, 7, 5, 1, 6), IS(6, 2, 1, 7, 8, 1), IS(6, 3, 3, 7, 2, 9), IS(6, 4, 5, 3, 2, 8),
        IS(6, 4, 6, 5, 8, 3), IS(6, 5, 4, 2, 0, 8), IS(6, 7, 8, 7, 2, 3), IS(7, 0, 1, 4, 7, 2), IS(7, 1, 7, 3, 0, 6),
        IS(7, 2, 3, 0, 1, 7), IS(7, 2, 8, 3, 4, 2), IS(7, 2, 8, 9, 3, 1), IS(7, 3, 3, 8, 4, 0), IS(7, 4, 1, 6, 7, 1),
        IS(7, 4, 2, 1, 7, 8), IS(7, 4, 6, 9, 1, 3), IS(7, 5, 6, 7, 3, 6), IS(7, 7, 8, 1, 9, 5), IS(8, 0, 7, 4, 6, 4),
        IS(8, 3, 2, 6, 0, 0), IS(8, 4, 0, 4, 3, 2), IS(8, 4, 1, 0, 5, 6), IS(8, 4, 9, 2, 5, 0), IS(8, 5, 8, 4, 2, 2),
        IS(8, 6, 6, 0, 4, 6), IS(8, 7, 3, 1, 8, 1), IS(8, 8, 1, 2, 0, 5), IS(8, 9, 6, 1, 0, 3), IS(9, 0, 3, 6, 3, 1),
        IS(9, 2, 0, 7, 1, 2), IS(9, 7, 5, 1, 6, 4)
      ), IS(
        IS(0, 7, 2, 9, 1, 1), IS(1, 0, 8, 4, 5, 6), IS(1, 1, 6, 1, 9, 4), IS(1, 3, 4, 9, 1, 1), IS(1, 4, 2, 1, 7, 6),
        IS(1, 4, 6, 3, 6, 1), IS(1, 5, 1, 6, 7, 2), IS(1, 5, 5, 5, 6, 0), IS(1, 6, 1, 2, 7, 7), IS(1, 7, 5, 2, 2, 7),
        IS(1, 7, 5, 6, 2, 4), IS(1, 7, 7, 9, 0, 8), IS(2, 2, 4, 2, 6, 7), IS(2, 3, 2, 8, 2, 5), IS(2, 4, 4, 2, 2, 9),
        IS(2, 6, 3, 3, 5, 4), IS(3, 0, 2, 6, 8, 1), IS(3, 0, 6, 1, 5, 6), IS(3, 2, 3, 7, 7, 2), IS(3, 3, 4, 4, 0, 5),
        IS(3, 4, 0, 2, 3, 7), IS(3, 4, 0, 7, 6, 4), IS(3, 5, 7, 8, 5, 0), IS(3, 6, 4, 6, 1, 2), IS(3, 7, 3, 8, 0, 7),
        IS(4, 1, 8, 0, 2, 5), IS(4, 2, 4, 2, 5, 3), IS(4, 3, 3, 2, 5, 9), IS(5, 0, 1, 5, 6, 1), IS(5, 1, 3, 7, 2, 8),
        IS(5, 2, 5, 7, 0, 3), IS(5, 8, 2, 2, 1, 2), IS(6, 1, 3, 5, 5, 1), IS(7, 2, 5, 2, 3, 6), IS(7, 3, 6, 3, 2, 0),
        IS(7, 5, 4, 5, 1, 2), IS(7, 7, 7, 1, 9, 0), IS(8, 5, 1, 2, 0, 0), IS(9, 0, 4, 1, 0, 4), IS(9, 2, 1, 1, 4, 4),
        IS(9, 6, 1, 0, 5, 0)
      ), IS(
        IS(0, 1, 6, 6, 0, 6), IS(0, 2, 5, 9, 0, 5), IS(0, 4, 1, 0, 3, 3), IS(1, 0, 3, 0, 4, 4), IS(1, 0, 4, 7, 4, 0),
        IS(1, 1, 6, 1, 5, 0), IS(1, 5, 0, 4, 5, 2), IS(1, 5, 3, 3, 1, 3), IS(1, 5, 5, 2, 0, 0), IS(1, 7, 1, 1, 2, 4),
        IS(3, 0, 4, 2, 1, 2), IS(3, 1, 2, 4, 1, 3), IS(3, 4, 6, 4, 2, 0), IS(4, 3, 1, 2, 3, 7), IS(5, 1, 5, 1, 7, 0),
        IS(5, 2, 0, 4, 0, 1)
      ), IS(
        IS(5, 1, 2, 0, 6, 0)
      ))
    val srt = getSorter(6)
    Assert.assertEquals(sortNDSResults(expected), sortNDSResults(srt.doSorting(input)))
  }

  @Test
  def trickyRandomTest3(): Unit = {
    val input = IS(
      IS(76, 434, 226), IS(555, 408, 243), IS(727, 25, 256), IS(37, 263, 236), IS(42, 437, 42), IS(4, 665, 49),
      IS(74, 956, 899), IS(449, 272, 730), IS(639, 932, 571), IS(271, 604, 684), IS(911, 441, 716), IS(991, 449, 954),
      IS(815, 691, 177), IS(333, 44, 909), IS(448, 629, 722), IS(661, 857, 730), IS(229, 242, 988), IS(953, 117, 238),
      IS(997, 614, 376), IS(269, 811, 433), IS(287, 72, 245), IS(962, 493, 896), IS(639, 890, 284), IS(521, 770, 904),
      IS(714, 533, 473), IS(12, 625, 489), IS(471, 355, 661), IS(56, 967, 72), IS(494, 386, 291), IS(3, 989, 929),
      IS(494, 249, 818), IS(624, 157, 200), IS(156, 953, 15), IS(5, 778, 289), IS(446, 372, 551), IS(777, 598, 171),
      IS(331, 740, 178), IS(44, 75, 56), IS(638, 597, 43), IS(691, 798, 301), IS(946, 491, 517), IS(885, 91, 986),
      IS(931, 584, 716), IS(213, 606, 41), IS(927, 703, 913), IS(728, 14, 110), IS(74, 560, 739), IS(994, 268, 280),
      IS(253, 805, 237), IS(828, 495, 780), IS(146, 671, 923), IS(865, 495, 831), IS(500, 129, 955), IS(909, 441, 129),
      IS(431, 976, 61), IS(312, 87, 877), IS(915, 272, 185), IS(437, 590, 703), IS(35, 795, 95), IS(357, 625, 952),
      IS(576, 49, 788), IS(397, 821, 740), IS(174, 548, 906), IS(937, 137, 628), IS(119, 640, 919), IS(279, 897, 614),
      IS(268, 489, 26), IS(811, 200, 103), IS(784, 583, 521), IS(442, 203, 697), IS(798, 415, 248), IS(214, 782, 892),
      IS(587, 27, 798), IS(161, 769, 95), IS(705, 600, 699), IS(687, 674, 898), IS(551, 335, 565), IS(632, 520, 970),
      IS(611, 747, 917), IS(39, 420, 48), IS(575, 128, 479), IS(347, 620, 711), IS(205, 303, 209), IS(344, 556, 384),
      IS(541, 213, 399), IS(781, 552, 546), IS(123, 653, 154), IS(934, 460, 445), IS(488, 794, 469), IS(323, 617, 457),
      IS(15, 218, 302), IS(132, 281, 962), IS(232, 825, 205), IS(363, 684, 255), IS(203, 342, 993), IS(97, 47, 672),
      IS(595, 868, 926), IS(964, 919, 519), IS(38, 444, 830), IS(454, 643, 52), IS(687, 891, 901), IS(635, 973, 810),
      IS(351, 134, 312), IS(143, 867, 243), IS(279, 566, 296), IS(431, 747, 598), IS(238, 684, 606), IS(619, 152, 627),
      IS(674, 110, 184), IS(857, 335, 572), IS(832, 57, 756), IS(256, 772, 31), IS(551, 469, 54), IS(820, 47, 964),
      IS(833, 651, 422), IS(703, 671, 958), IS(733, 960, 78), IS(934, 295, 528), IS(325, 37, 751), IS(728, 492, 114),
      IS(70, 405, 81), IS(160, 436, 212), IS(143, 235, 192), IS(298, 25, 552), IS(178, 166, 501), IS(936, 926, 462),
      IS(515, 129, 267), IS(755, 644, 121), IS(801, 98, 536), IS(704, 34, 55), IS(383, 488, 375), IS(560, 993, 220),
      IS(227, 83, 738), IS(66, 892, 197), IS(909, 766, 381), IS(128, 745, 21), IS(33, 489, 465), IS(915, 595, 715),
      IS(812, 833, 465), IS(3, 21, 262), IS(358, 929, 774), IS(17, 758, 855), IS(277, 336, 156), IS(121, 521, 665),
      IS(776, 634, 469), IS(266, 140, 119), IS(626, 54, 29), IS(409, 884, 271), IS(855, 933, 539), IS(771, 625, 568),
      IS(913, 429, 440), IS(881, 99, 512), IS(40, 191, 681), IS(786, 828, 851), IS(87, 75, 158), IS(716, 494, 816),
      IS(355, 37, 149), IS(648, 430, 637), IS(504, 779, 708), IS(587, 523, 378), IS(871, 180, 400), IS(399, 140, 27),
      IS(28, 490, 864), IS(451, 215, 276), IS(431, 476, 354), IS(908, 309, 175), IS(667, 164, 845), IS(968, 68, 15),
      IS(806, 783, 675), IS(385, 142, 171), IS(322, 467, 895), IS(716, 61, 1), IS(86, 955, 115), IS(74, 642, 288),
      IS(998, 884, 209), IS(832, 493, 561), IS(982, 33, 177), IS(250, 775, 387), IS(221, 158, 715), IS(908, 150, 686),
      IS(993, 240, 730), IS(897, 387, 780), IS(613, 719, 337), IS(253, 966, 180), IS(922, 2, 320), IS(364, 318, 755),
      IS(572, 749, 839), IS(468, 348, 901), IS(437, 289, 898), IS(201, 664, 552), IS(591, 679, 480), IS(830, 968, 472),
      IS(673, 487, 531), IS(45, 763, 686), IS(575, 141, 893), IS(300, 225, 145), IS(313, 825, 259), IS(469, 563, 316),
      IS(63, 251, 603), IS(809, 41, 124), IS(258, 614, 618), IS(326, 217, 177), IS(65, 77, 68), IS(10, 676, 647),
      IS(398, 416, 236), IS(17, 606, 747), IS(302, 527, 79), IS(158, 654, 220), IS(46, 183, 398), IS(342, 476, 916),
      IS(885, 44, 547), IS(243, 867, 136), IS(286, 974, 703), IS(323, 49, 129), IS(851, 401, 335), IS(585, 216, 586),
      IS(690, 203, 235), IS(434, 924, 534), IS(297, 190, 164), IS(471, 919, 811), IS(381, 799, 609), IS(789, 321, 163),
      IS(532, 256, 387), IS(167, 384, 199), IS(146, 727, 773), IS(295, 665, 764), IS(406, 31, 371), IS(192, 147, 670),
      IS(764, 614, 712), IS(760, 490, 976), IS(955, 870, 178), IS(87, 555, 722), IS(376, 657, 396), IS(284, 406, 482),
      IS(159, 876, 581), IS(817, 101, 13), IS(530, 581, 396), IS(345, 807, 613), IS(115, 318, 938), IS(209, 607, 77),
      IS(595, 864, 720), IS(140, 583, 94), IS(550, 919, 778), IS(458, 333, 71), IS(337, 818, 511), IS(462, 581, 747),
      IS(640, 222, 164), IS(464, 861, 446), IS(905, 790, 542), IS(0, 412, 755), IS(130, 546, 716), IS(793, 402, 951),
      IS(456, 866, 822), IS(297, 341, 361), IS(363, 877, 346), IS(147, 982, 618), IS(663, 824, 122), IS(247, 292, 18),
      IS(917, 545, 510), IS(105, 521, 623), IS(492, 896, 670), IS(626, 583, 375), IS(164, 443, 752), IS(830, 654, 163),
      IS(156, 971, 891), IS(593, 234, 881), IS(118, 876, 62), IS(293, 582, 797), IS(574, 645, 311), IS(439, 841, 312),
      IS(167, 46, 695), IS(100, 709, 9), IS(914, 896, 579), IS(430, 684, 822), IS(164, 705, 988), IS(172, 664, 424),
      IS(344, 960, 525), IS(950, 734, 374), IS(672, 722, 45), IS(327, 169, 139), IS(774, 207, 421), IS(427, 592, 259),
      IS(692, 756, 545), IS(302, 274, 163), IS(488, 799, 523), IS(384, 415, 264), IS(447, 751, 47), IS(597, 702, 574),
      IS(491, 542, 381), IS(187, 78, 939), IS(518, 994, 489), IS(108, 822, 992), IS(117, 802, 775), IS(455, 150, 757),
      IS(366, 406, 624), IS(323, 191, 371), IS(35, 178, 244), IS(112, 538, 794), IS(221, 968, 58), IS(930, 225, 924)
    )
    val expected = IS(
      IS(
        IS(3, 989, 929), IS(74, 956, 899), IS(108, 822, 992), IS(147, 982, 618), IS(156, 971, 891), IS(164, 705, 988),
        IS(203, 342, 993), IS(229, 242, 988), IS(286, 974, 703), IS(471, 919, 811), IS(518, 994, 489), IS(560, 993, 220),
        IS(595, 868, 926), IS(611, 747, 917), IS(632, 520, 970), IS(635, 973, 810), IS(639, 932, 571), IS(687, 891, 901),
        IS(703, 671, 958), IS(760, 490, 976), IS(786, 828, 851), IS(806, 783, 675), IS(830, 968, 472), IS(855, 933, 539),
        IS(885, 91, 986), IS(914, 896, 579), IS(927, 703, 913), IS(931, 584, 716), IS(936, 926, 462), IS(962, 493, 896),
        IS(964, 919, 519), IS(991, 449, 954), IS(993, 240, 730), IS(997, 614, 376), IS(998, 884, 209)
      ), IS(
        IS(56, 967, 72), IS(132, 281, 962), IS(146, 671, 923), IS(214, 782, 892), IS(253, 966, 180), IS(344, 960, 525),
        IS(357, 625, 952), IS(358, 929, 774), IS(431, 976, 61), IS(434, 924, 534), IS(456, 866, 822), IS(500, 129, 955),
        IS(521, 770, 904), IS(550, 919, 778), IS(572, 749, 839), IS(595, 864, 720), IS(639, 890, 284), IS(661, 857, 730),
        IS(687, 674, 898), IS(692, 756, 545), IS(733, 960, 78), IS(764, 614, 712), IS(771, 625, 568), IS(793, 402, 951),
        IS(812, 833, 465), IS(820, 47, 964), IS(865, 495, 831), IS(897, 387, 780), IS(905, 790, 542), IS(909, 766, 381),
        IS(911, 441, 716), IS(915, 595, 715), IS(917, 545, 510), IS(930, 225, 924), IS(934, 295, 528), IS(937, 137, 628),
        IS(946, 491, 517), IS(950, 734, 374), IS(955, 870, 178), IS(994, 268, 280)
      ), IS(
        IS(17, 758, 855), IS(86, 955, 115), IS(115, 318, 938), IS(117, 802, 775), IS(119, 640, 919), IS(146, 727, 773),
        IS(174, 548, 906), IS(187, 78, 939), IS(221, 968, 58), IS(279, 897, 614), IS(342, 476, 916), IS(397, 821, 740),
        IS(430, 684, 822), IS(448, 629, 722), IS(462, 581, 747), IS(468, 348, 901), IS(492, 896, 670), IS(494, 249, 818),
        IS(504, 779, 708), IS(575, 141, 893), IS(593, 234, 881), IS(597, 702, 574), IS(613, 719, 337), IS(663, 824, 122),
        IS(667, 164, 845), IS(691, 798, 301), IS(705, 600, 699), IS(716, 494, 816), IS(776, 634, 469), IS(781, 552, 546),
        IS(784, 583, 521), IS(815, 691, 177), IS(828, 495, 780), IS(830, 654, 163), IS(832, 57, 756), IS(832, 493, 561),
        IS(833, 651, 422), IS(857, 335, 572), IS(908, 150, 686), IS(934, 460, 445), IS(953, 117, 238), IS(968, 68, 15),
        IS(982, 33, 177)
      ), IS(
        IS(28, 490, 864), IS(45, 763, 686), IS(66, 892, 197), IS(156, 953, 15), IS(159, 876, 581), IS(293, 582, 797),
        IS(295, 665, 764), IS(322, 467, 895), IS(333, 44, 909), IS(337, 818, 511), IS(345, 807, 613), IS(347, 620, 711),
        IS(363, 877, 346), IS(364, 318, 755), IS(381, 799, 609), IS(409, 884, 271), IS(431, 747, 598), IS(437, 289, 898),
        IS(437, 590, 703), IS(449, 272, 730), IS(455, 150, 757), IS(464, 861, 446), IS(471, 355, 661), IS(488, 799, 523),
        IS(576, 49, 788), IS(587, 27, 798), IS(591, 679, 480), IS(626, 583, 375), IS(648, 430, 637), IS(672, 722, 45),
        IS(673, 487, 531), IS(714, 533, 473), IS(755, 644, 121), IS(777, 598, 171), IS(801, 98, 536), IS(881, 99, 512),
        IS(885, 44, 547), IS(909, 441, 129), IS(913, 429, 440), IS(915, 272, 185), IS(922, 2, 320)
      ), IS(
        IS(10, 676, 647), IS(17, 606, 747), IS(38, 444, 830), IS(74, 560, 739), IS(87, 555, 722), IS(112, 538, 794),
        IS(118, 876, 62), IS(130, 546, 716), IS(143, 867, 243), IS(164, 443, 752), IS(221, 158, 715), IS(238, 684, 606),
        IS(243, 867, 136), IS(258, 614, 618), IS(269, 811, 433), IS(271, 604, 684), IS(312, 87, 877), IS(325, 37, 751),
        IS(366, 406, 624), IS(439, 841, 312), IS(442, 203, 697), IS(446, 372, 551), IS(488, 794, 469), IS(530, 581, 396),
        IS(551, 335, 565), IS(574, 645, 311), IS(585, 216, 586), IS(587, 523, 378), IS(619, 152, 627), IS(638, 597, 43),
        IS(728, 492, 114), IS(774, 207, 421), IS(798, 415, 248), IS(851, 401, 335), IS(871, 180, 400), IS(908, 309, 175)
      ), IS(
        IS(0, 412, 755), IS(5, 778, 289), IS(40, 191, 681), IS(121, 521, 665), IS(192, 147, 670), IS(201, 664, 552),
        IS(227, 83, 738), IS(250, 775, 387), IS(284, 406, 482), IS(298, 25, 552), IS(313, 825, 259), IS(323, 617, 457),
        IS(331, 740, 178), IS(363, 684, 255), IS(376, 657, 396), IS(427, 592, 259), IS(447, 751, 47), IS(454, 643, 52),
        IS(469, 563, 316), IS(491, 542, 381), IS(494, 386, 291), IS(532, 256, 387), IS(541, 213, 399), IS(551, 469, 54),
        IS(555, 408, 243), IS(575, 128, 479), IS(640, 222, 164), IS(690, 203, 235), IS(727, 25, 256), IS(789, 321, 163),
        IS(809, 41, 124), IS(811, 200, 103), IS(817, 101, 13)
      ), IS(
        IS(12, 625, 489), IS(97, 47, 672), IS(105, 521, 623), IS(167, 46, 695), IS(172, 664, 424), IS(178, 166, 501),
        IS(232, 825, 205), IS(253, 805, 237), IS(256, 772, 31), IS(279, 566, 296), IS(344, 556, 384), IS(383, 488, 375),
        IS(406, 31, 371), IS(431, 476, 354), IS(451, 215, 276), IS(458, 333, 71), IS(515, 129, 267), IS(624, 157, 200),
        IS(674, 110, 184), IS(704, 34, 55), IS(716, 61, 1), IS(728, 14, 110)), IS(IS(33, 489, 465), IS(35, 795, 95),
        IS(63, 251, 603), IS(74, 642, 288), IS(76, 434, 226), IS(158, 654, 220), IS(160, 436, 212), IS(161, 769, 95),
        IS(209, 607, 77), IS(213, 606, 41), IS(297, 341, 361), IS(302, 527, 79), IS(323, 191, 371), IS(351, 134, 312),
        IS(384, 415, 264), IS(398, 416, 236), IS(399, 140, 27), IS(626, 54, 29)
      ), IS(
        IS(4, 665, 49), IS(15, 218, 302), IS(37, 263, 236), IS(46, 183, 398), IS(123, 653, 154), IS(128, 745, 21),
        IS(140, 583, 94), IS(167, 384, 199), IS(205, 303, 209), IS(268, 489, 26), IS(277, 336, 156), IS(287, 72, 245),
        IS(302, 274, 163), IS(326, 217, 177), IS(327, 169, 139), IS(385, 142, 171)
      ), IS(
        IS(3, 21, 262), IS(35, 178, 244), IS(39, 420, 48), IS(42, 437, 42), IS(70, 405, 81), IS(100, 709, 9),
        IS(143, 235, 192), IS(247, 292, 18), IS(297, 190, 164), IS(300, 225, 145), IS(323, 49, 129), IS(355, 37, 149)
      ), IS(
        IS(87, 75, 158), IS(266, 140, 119)
      ), IS(
        IS(65, 77, 68)
      ), IS(
        IS(44, 75, 56)
      )
    )
    val srt = getSorter(3)
    val sortNDSExp = sortNDSResults(expected)
    val sortNDSFnd = sortNDSResults(srt.doSorting(input))
    Assert.assertEquals(sortNDSExp, sortNDSFnd)
  }
}
